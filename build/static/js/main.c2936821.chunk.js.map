{"version":3,"sources":["App.js","index.js"],"names":["Tezos","TezosToolkit","options","name","disableDefaultEvents","iconUrl","preferredNetwork","eventHandlers","BeaconEvent","PAIR_INIT","handler","defaultEventCallbacks","PAIR_SUCCESS","data","a","console","log","wallet","BeaconWallet","setWalletProvider","contractAddress","App","useState","userAddress","setUserAddress","balance","setBalance","contractInstance","setContractInstance","contractStorage","setContractStorage","purchaseQuantity","setPurchaseQuantity","onConnectWallet","requestPermissions","network","type","getPKH","useEffect","client","getActiveAccount","activeAccount","address","tz","getBalance","toString","walletConnected","at","contract","storage","contractData","onMint","token_metadatas","tokens","all_tokens","length","pq","token_md","MichelsonMap","fromLiteral","char2Bytes","symbol","tokenUri","push","priceToPay","MINT_PRICE","methods","mint","send","amount","op","confirmation","window","location","reload","alert","onDisconnect","clearActiveAccount","className","onClick","min","step","max","MAX_PURCHASE","placeholder","value","onChange","e","target","MAX_SUPPLY","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2936821.chunk.js","sourcesContent":["import './App.css';\r\nimport { MichelsonMap, TezosToolkit } from '@taquito/taquito';\r\nimport { BeaconWallet } from '@taquito/beacon-wallet';\r\nimport { BeaconEvent, defaultEventCallbacks } from '@airgap/beacon-sdk';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { char2Bytes } from '@taquito/utils';\r\n\r\n// https://testnet-tezos.giganode.io\r\nconst Tezos = new TezosToolkit('https://florencenet.api.tez.ie');\r\nconst options = {\r\n    name: 'KraznikUnderverse',\r\n    disableDefaultEvents: true,\r\n    iconUrl: 'https://tezostaquito.io/img/favicon.png',\r\n    preferredNetwork: 'florencenet',\r\n    eventHandlers: {\r\n        // To keep the pairing alert, we have to add the following default event handlers back\r\n        [BeaconEvent.PAIR_INIT]: {\r\n            handler: defaultEventCallbacks.PAIR_INIT,\r\n        },\r\n        [BeaconEvent.PAIR_SUCCESS]: {\r\n            handler: defaultEventCallbacks.PAIR_SUCCESS,\r\n        },\r\n        PERMISSION_REQUEST_SUCCESS: {\r\n            handler: async (data) => {\r\n                console.log('permission data:', data);\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\nconst wallet = new BeaconWallet(options);\r\nTezos.setWalletProvider(wallet);\r\n\r\nconst contractAddress = 'KT1C6bQhy4gSSt3HYd1E6xUoHV5ZMUbkRY38';\r\n\r\nconst App = () => {\r\n    const [userAddress, setUserAddress] = useState('');\r\n    const [balance, setBalance] = useState('');\r\n    const [contractInstance, setContractInstance] = useState(null);\r\n    const [contractStorage, setContractStorage] = useState('');\r\n    const [purchaseQuantity, setPurchaseQuantity] = useState(0);\r\n\r\n    const onConnectWallet = async () => {\r\n        await wallet.requestPermissions({\r\n            network: {\r\n                // type: 'mainnet' | 'florencenet' | 'granadanet' | 'custom',\r\n                type: 'florencenet',\r\n            },\r\n        });\r\n        const userAddress = await wallet.getPKH();\r\n        setUserAddress(userAddress);\r\n        Tezos.setWalletProvider(wallet);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Tezos.setWalletProvider(wallet);\r\n        async function walletConnected() {\r\n            const activeAccount = await wallet.client.getActiveAccount();\r\n            if (activeAccount) {\r\n                setUserAddress(activeAccount.address);\r\n                const balance = await Tezos.tz.getBalance(\r\n                    activeAccount.address\r\n                );\r\n                console.log('balance: ', balance.toString());\r\n                if (balance) setBalance(balance.toString());\r\n                if (activeAccount) {\r\n                    console.log('Already connected: ', activeAccount.address);\r\n                }\r\n            }\r\n        }\r\n        walletConnected();\r\n    }, [userAddress]);\r\n\r\n    useEffect(() => {\r\n        async function contractData() {\r\n            // contract instance\r\n            const contract = await Tezos.wallet.at(contractAddress);\r\n            setContractInstance(contract);\r\n            const storage = await contract.storage();\r\n            setContractStorage(storage);\r\n            console.log('storage: ', storage);\r\n            // console.log(Tezos);\r\n            // let name = 'kangroo1',\r\n            //     symbol = 'Kg1',\r\n            //     tokenUri = 'ipfs://Qkjdncmdcs..';\r\n            // const tok_md = await contract.methods.make_metadata(\r\n            //     name,\r\n            //     symbol,\r\n            //     tokenUri\r\n            // );\r\n            // console.log('token metadta: ', tok_md);\r\n        }\r\n\r\n        contractData();\r\n    }, []);\r\n\r\n    const onMint = async () => {\r\n        try {\r\n            console.log('Minting..');\r\n            let token_metadatas = [];\r\n            let tokens = contractStorage.all_tokens.length;\r\n            let pq = purchaseQuantity;\r\n            while (pq--) {\r\n                let token_md = MichelsonMap.fromLiteral({\r\n                    name: char2Bytes(`Kangroo${tokens}`),\r\n                    symbol: char2Bytes(`Kg${tokens}`),\r\n                    tokenUri: char2Bytes(\r\n                        'ipfs://QmV3a1TAdCncfs84Gi9msDsDJVQBDt6Wb5gJRVuFRfrgtG'\r\n                    ),\r\n                });\r\n\r\n                token_metadatas.push(token_md);\r\n                tokens++;\r\n            }\r\n            // let purchaseQuantity = 2;\r\n            let priceToPay =\r\n                (contractStorage.MINT_PRICE.toString() * purchaseQuantity) /\r\n                10 ** 6;\r\n\r\n            console.log(token_metadatas);\r\n            console.log(tokens);\r\n            console.log(priceToPay);\r\n            console.log(purchaseQuantity);\r\n            const op = await contractInstance.methods\r\n                .mint(purchaseQuantity, token_metadatas)\r\n                .send({\r\n                    amount: priceToPay,\r\n                });\r\n\r\n            await op.confirmation();\r\n\r\n            console.log('Minted Succesfully');\r\n            window.location.reload();\r\n        } catch (err) {\r\n            alert('Please try again after 50 seconds');\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    // const onSend = async () => {\r\n    //     const op = await Tezos.wallet\r\n    //         .transfer({\r\n    //             to: 'tz1ZA9ttp6QpPFQoNKLLqgbezcQ5kqQHt5BA',\r\n    //             amount: 0.2,\r\n    //         })\r\n    //         .send();\r\n\r\n    //     console.log('Hash: ', op.opHash);\r\n    //     const result = await op.confirmation();\r\n    //     if (result.completed) {\r\n    //         console.log('Transaction succesful');\r\n    //     } else {\r\n    //         console.log('Error occured');\r\n    //     }\r\n    // };\r\n\r\n    const onDisconnect = async () => {\r\n        // await new Promise((resolve) => setTimeout(resolve, 1000));\r\n        await wallet.clearActiveAccount();\r\n        window.location.reload();\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {userAddress ? (\r\n                <div>\r\n                    <button onClick={onDisconnect}>Disconnect</button>\r\n                    <div>user address: {userAddress}</div>\r\n                    <div>Balance: {balance}</div>\r\n                </div>\r\n            ) : (\r\n                <button onClick={onConnectWallet}>Connect Wallet</button>\r\n            )}\r\n            <div>contract address: {contractAddress}</div>\r\n            {contractInstance ? (\r\n                <div>\r\n                    <input\r\n                        type=\"number\"\r\n                        min=\"1\"\r\n                        step=\"1\"\r\n                        max={\r\n                            contractStorage\r\n                                ? contractStorage.MAX_PURCHASE.toString()\r\n                                : 2\r\n                        }\r\n                        placeholder=\"Enter the purchase quantity\"\r\n                        value={purchaseQuantity}\r\n                        onChange={(e) => setPurchaseQuantity(e.target.value)}\r\n                    />\r\n                    <button onClick={onMint}>Mint</button>\r\n                </div>\r\n            ) : null}\r\n            {contractStorage !== '' ? (\r\n                <div>\r\n                    <div>\r\n                        Max supply : {contractStorage.MAX_SUPPLY.toString()}\r\n                    </div>\r\n                    <div>\r\n                        Max purchase allowed :{' '}\r\n                        {contractStorage.MAX_PURCHASE.toString()}\r\n                    </div>\r\n                    <div>\r\n                        mint price for 1 kangroo:{' '}\r\n                        {contractStorage.MINT_PRICE.toString() / 10 ** 6} XTZ\r\n                    </div>\r\n                    <div>\r\n                        number of tokens minted yet:{' '}\r\n                        {contractStorage.all_tokens.length}\r\n                    </div>\r\n                    <div></div>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}